Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER declarations proclist cmp_stmt
Rule 2     declarations -> <empty>
Rule 3     declarations -> VAR declist
Rule 4     declist -> idlist COLON type
Rule 5     declist -> declist SEMICOLON idlist COLON type
Rule 6     idlist -> IDENTIFIER
Rule 7     idlist -> idlist COMMA IDENTIFIER
Rule 8     type -> INT_KW
Rule 9     type -> FLOAT_KW
Rule 10    proclist -> <empty>
Rule 11    proclist -> proclist proc
Rule 12    proc -> PROCEDURE IDENTIFIER parameters COLON declarations cmp_stmt
Rule 13    parameters -> <empty>
Rule 14    parameters -> LRB declist RRB
Rule 15    cmp_stmt -> BEGIN stmtlist END
Rule 16    stmtlist -> stmt
Rule 17    stmtlist -> stmtlist SEMICOLON stmt
Rule 18    stmt -> IDENTIFIER ASSIGN exp
Rule 19    stmt -> IF exp THEN stmt ELSE stmt
Rule 20    stmt -> IF exp THEN stmt
Rule 21    stmt -> WHILE exp DO stmt
Rule 22    stmt -> cmp_stmt
Rule 23    stmt -> IDENTIFIER args
Rule 24    stmt -> <empty>
Rule 25    args -> <empty>
Rule 26    args -> LRB act_paramlist RRB
Rule 27    act_paramlist -> act_paramlist COMMA act_param
Rule 28    act_paramlist -> act_param
Rule 29    act_param -> exp
Rule 30    exp -> INTEGER
Rule 31    exp -> FLOAT
Rule 32    exp -> IDENTIFIER
Rule 33    exp -> exp LT exp
Rule 34    exp -> exp LTE exp
Rule 35    exp -> exp EQUAL exp
Rule 36    exp -> exp NOTEQ exp
Rule 37    exp -> exp GT exp
Rule 38    exp -> exp GTE exp
Rule 39    exp -> exp AND exp
Rule 40    exp -> exp OR exp
Rule 41    exp -> NOT exp
Rule 42    exp -> LRB exp RRB
Rule 43    exp -> exp SUM exp
Rule 44    exp -> exp SUB exp
Rule 45    exp -> exp DIV exp
Rule 46    exp -> exp MOD exp
Rule 47    exp -> exp MUL exp
Rule 48    exp -> SUB exp

Terminals, with rules where they appear

AND                  : 39
ASSIGN               : 18
BEGIN                : 15
COLON                : 4 5 12
COMMA                : 7 27
DIV                  : 45
DO                   : 21
ELSE                 : 19
END                  : 15
EQUAL                : 35
FALSE                : 
FLOAT                : 31
FLOAT_KW             : 9
GT                   : 37
GTE                  : 38
IDENTIFIER           : 1 6 7 12 18 23 32
IF                   : 19 20
INTEGER              : 30
INT_KW               : 8
LRB                  : 14 26 42
LT                   : 33
LTE                  : 34
MOD                  : 46
MUL                  : 47
NOT                  : 41
NOTEQ                : 36
OR                   : 40
PROCEDURE            : 12
PROGRAM              : 1
RRB                  : 14 26 42
SEMICOLON            : 5 17
SUB                  : 44 48
SUM                  : 43
THEN                 : 19 20
TRUE                 : 
VAR                  : 3
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

act_param            : 27 28
act_paramlist        : 26 27
args                 : 23
cmp_stmt             : 1 12 22
declarations         : 1 12
declist              : 3 5 14
exp                  : 18 19 20 21 29 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 43 43 44 44 45 45 46 46 47 47 48
idlist               : 4 5 7
parameters           : 12
proc                 : 11
proclist             : 1 11
program              : 0
stmt                 : 16 17 19 19 20 21
stmtlist             : 15 17
type                 : 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER declarations proclist cmp_stmt

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER declarations proclist cmp_stmt

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . declarations proclist cmp_stmt
    (2) declarations -> .
    (3) declarations -> . VAR declist

    BEGIN           reduce using rule 2 (declarations -> .)
    PROCEDURE       reduce using rule 2 (declarations -> .)
    VAR             shift and go to state 5

    declarations                   shift and go to state 4

state 4

    (1) program -> PROGRAM IDENTIFIER declarations . proclist cmp_stmt
    (10) proclist -> .
    (11) proclist -> . proclist proc

    BEGIN           reduce using rule 10 (proclist -> .)
    PROCEDURE       reduce using rule 10 (proclist -> .)

    proclist                       shift and go to state 6

state 5

    (3) declarations -> VAR . declist
    (4) declist -> . idlist COLON type
    (5) declist -> . declist SEMICOLON idlist COLON type
    (6) idlist -> . IDENTIFIER
    (7) idlist -> . idlist COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 9

    declist                        shift and go to state 7
    idlist                         shift and go to state 8

state 6

    (1) program -> PROGRAM IDENTIFIER declarations proclist . cmp_stmt
    (11) proclist -> proclist . proc
    (15) cmp_stmt -> . BEGIN stmtlist END
    (12) proc -> . PROCEDURE IDENTIFIER parameters COLON declarations cmp_stmt

    BEGIN           shift and go to state 12
    PROCEDURE       shift and go to state 13

    cmp_stmt                       shift and go to state 10
    proc                           shift and go to state 11

state 7

    (3) declarations -> VAR declist .
    (5) declist -> declist . SEMICOLON idlist COLON type

    BEGIN           reduce using rule 3 (declarations -> VAR declist .)
    PROCEDURE       reduce using rule 3 (declarations -> VAR declist .)
    SEMICOLON       shift and go to state 14


state 8

    (4) declist -> idlist . COLON type
    (7) idlist -> idlist . COMMA IDENTIFIER

    COLON           shift and go to state 15
    COMMA           shift and go to state 16


state 9

    (6) idlist -> IDENTIFIER .

    COLON           reduce using rule 6 (idlist -> IDENTIFIER .)
    COMMA           reduce using rule 6 (idlist -> IDENTIFIER .)


state 10

    (1) program -> PROGRAM IDENTIFIER declarations proclist cmp_stmt .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER declarations proclist cmp_stmt .)


state 11

    (11) proclist -> proclist proc .

    BEGIN           reduce using rule 11 (proclist -> proclist proc .)
    PROCEDURE       reduce using rule 11 (proclist -> proclist proc .)


state 12

    (15) cmp_stmt -> BEGIN . stmtlist END
    (16) stmtlist -> . stmt
    (17) stmtlist -> . stmtlist SEMICOLON stmt
    (18) stmt -> . IDENTIFIER ASSIGN exp
    (19) stmt -> . IF exp THEN stmt ELSE stmt
    (20) stmt -> . IF exp THEN stmt
    (21) stmt -> . WHILE exp DO stmt
    (22) stmt -> . cmp_stmt
    (23) stmt -> . IDENTIFIER args
    (24) stmt -> .
    (15) cmp_stmt -> . BEGIN stmtlist END

    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    END             reduce using rule 24 (stmt -> .)
    SEMICOLON       reduce using rule 24 (stmt -> .)
    BEGIN           shift and go to state 12

    stmtlist                       shift and go to state 17
    stmt                           shift and go to state 18
    cmp_stmt                       shift and go to state 22

state 13

    (12) proc -> PROCEDURE . IDENTIFIER parameters COLON declarations cmp_stmt

    IDENTIFIER      shift and go to state 23


state 14

    (5) declist -> declist SEMICOLON . idlist COLON type
    (6) idlist -> . IDENTIFIER
    (7) idlist -> . idlist COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 9

    idlist                         shift and go to state 24

state 15

    (4) declist -> idlist COLON . type
    (8) type -> . INT_KW
    (9) type -> . FLOAT_KW

    INT_KW          shift and go to state 26
    FLOAT_KW        shift and go to state 27

    type                           shift and go to state 25

state 16

    (7) idlist -> idlist COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 28


state 17

    (15) cmp_stmt -> BEGIN stmtlist . END
    (17) stmtlist -> stmtlist . SEMICOLON stmt

    END             shift and go to state 29
    SEMICOLON       shift and go to state 30


state 18

    (16) stmtlist -> stmt .

    END             reduce using rule 16 (stmtlist -> stmt .)
    SEMICOLON       reduce using rule 16 (stmtlist -> stmt .)


state 19

    (18) stmt -> IDENTIFIER . ASSIGN exp
    (23) stmt -> IDENTIFIER . args
    (25) args -> .
    (26) args -> . LRB act_paramlist RRB

    ASSIGN          shift and go to state 31
    END             reduce using rule 25 (args -> .)
    SEMICOLON       reduce using rule 25 (args -> .)
    ELSE            reduce using rule 25 (args -> .)
    LRB             shift and go to state 33

    args                           shift and go to state 32

state 20

    (19) stmt -> IF . exp THEN stmt ELSE stmt
    (20) stmt -> IF . exp THEN stmt
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 34

state 21

    (21) stmt -> WHILE . exp DO stmt
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 41

state 22

    (22) stmt -> cmp_stmt .

    END             reduce using rule 22 (stmt -> cmp_stmt .)
    SEMICOLON       reduce using rule 22 (stmt -> cmp_stmt .)
    ELSE            reduce using rule 22 (stmt -> cmp_stmt .)


state 23

    (12) proc -> PROCEDURE IDENTIFIER . parameters COLON declarations cmp_stmt
    (13) parameters -> .
    (14) parameters -> . LRB declist RRB

    COLON           reduce using rule 13 (parameters -> .)
    LRB             shift and go to state 43

    parameters                     shift and go to state 42

state 24

    (5) declist -> declist SEMICOLON idlist . COLON type
    (7) idlist -> idlist . COMMA IDENTIFIER

    COLON           shift and go to state 44
    COMMA           shift and go to state 16


state 25

    (4) declist -> idlist COLON type .

    SEMICOLON       reduce using rule 4 (declist -> idlist COLON type .)
    BEGIN           reduce using rule 4 (declist -> idlist COLON type .)
    PROCEDURE       reduce using rule 4 (declist -> idlist COLON type .)
    RRB             reduce using rule 4 (declist -> idlist COLON type .)


state 26

    (8) type -> INT_KW .

    SEMICOLON       reduce using rule 8 (type -> INT_KW .)
    BEGIN           reduce using rule 8 (type -> INT_KW .)
    PROCEDURE       reduce using rule 8 (type -> INT_KW .)
    RRB             reduce using rule 8 (type -> INT_KW .)


state 27

    (9) type -> FLOAT_KW .

    SEMICOLON       reduce using rule 9 (type -> FLOAT_KW .)
    BEGIN           reduce using rule 9 (type -> FLOAT_KW .)
    PROCEDURE       reduce using rule 9 (type -> FLOAT_KW .)
    RRB             reduce using rule 9 (type -> FLOAT_KW .)


state 28

    (7) idlist -> idlist COMMA IDENTIFIER .

    COLON           reduce using rule 7 (idlist -> idlist COMMA IDENTIFIER .)
    COMMA           reduce using rule 7 (idlist -> idlist COMMA IDENTIFIER .)


state 29

    (15) cmp_stmt -> BEGIN stmtlist END .

    $end            reduce using rule 15 (cmp_stmt -> BEGIN stmtlist END .)
    END             reduce using rule 15 (cmp_stmt -> BEGIN stmtlist END .)
    SEMICOLON       reduce using rule 15 (cmp_stmt -> BEGIN stmtlist END .)
    ELSE            reduce using rule 15 (cmp_stmt -> BEGIN stmtlist END .)
    BEGIN           reduce using rule 15 (cmp_stmt -> BEGIN stmtlist END .)
    PROCEDURE       reduce using rule 15 (cmp_stmt -> BEGIN stmtlist END .)


state 30

    (17) stmtlist -> stmtlist SEMICOLON . stmt
    (18) stmt -> . IDENTIFIER ASSIGN exp
    (19) stmt -> . IF exp THEN stmt ELSE stmt
    (20) stmt -> . IF exp THEN stmt
    (21) stmt -> . WHILE exp DO stmt
    (22) stmt -> . cmp_stmt
    (23) stmt -> . IDENTIFIER args
    (24) stmt -> .
    (15) cmp_stmt -> . BEGIN stmtlist END

    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    END             reduce using rule 24 (stmt -> .)
    SEMICOLON       reduce using rule 24 (stmt -> .)
    BEGIN           shift and go to state 12

    stmt                           shift and go to state 45
    cmp_stmt                       shift and go to state 22

state 31

    (18) stmt -> IDENTIFIER ASSIGN . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 46

state 32

    (23) stmt -> IDENTIFIER args .

    END             reduce using rule 23 (stmt -> IDENTIFIER args .)
    SEMICOLON       reduce using rule 23 (stmt -> IDENTIFIER args .)
    ELSE            reduce using rule 23 (stmt -> IDENTIFIER args .)


state 33

    (26) args -> LRB . act_paramlist RRB
    (27) act_paramlist -> . act_paramlist COMMA act_param
    (28) act_paramlist -> . act_param
    (29) act_param -> . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    act_paramlist                  shift and go to state 47
    act_param                      shift and go to state 48
    exp                            shift and go to state 49

state 34

    (19) stmt -> IF exp . THEN stmt ELSE stmt
    (20) stmt -> IF exp . THEN stmt
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            shift and go to state 50
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63


state 35

    (30) exp -> INTEGER .

    THEN            reduce using rule 30 (exp -> INTEGER .)
    LT              reduce using rule 30 (exp -> INTEGER .)
    LTE             reduce using rule 30 (exp -> INTEGER .)
    EQUAL           reduce using rule 30 (exp -> INTEGER .)
    NOTEQ           reduce using rule 30 (exp -> INTEGER .)
    GT              reduce using rule 30 (exp -> INTEGER .)
    GTE             reduce using rule 30 (exp -> INTEGER .)
    AND             reduce using rule 30 (exp -> INTEGER .)
    OR              reduce using rule 30 (exp -> INTEGER .)
    SUM             reduce using rule 30 (exp -> INTEGER .)
    SUB             reduce using rule 30 (exp -> INTEGER .)
    DIV             reduce using rule 30 (exp -> INTEGER .)
    MOD             reduce using rule 30 (exp -> INTEGER .)
    MUL             reduce using rule 30 (exp -> INTEGER .)
    DO              reduce using rule 30 (exp -> INTEGER .)
    END             reduce using rule 30 (exp -> INTEGER .)
    SEMICOLON       reduce using rule 30 (exp -> INTEGER .)
    ELSE            reduce using rule 30 (exp -> INTEGER .)
    RRB             reduce using rule 30 (exp -> INTEGER .)
    COMMA           reduce using rule 30 (exp -> INTEGER .)


state 36

    (31) exp -> FLOAT .

    THEN            reduce using rule 31 (exp -> FLOAT .)
    LT              reduce using rule 31 (exp -> FLOAT .)
    LTE             reduce using rule 31 (exp -> FLOAT .)
    EQUAL           reduce using rule 31 (exp -> FLOAT .)
    NOTEQ           reduce using rule 31 (exp -> FLOAT .)
    GT              reduce using rule 31 (exp -> FLOAT .)
    GTE             reduce using rule 31 (exp -> FLOAT .)
    AND             reduce using rule 31 (exp -> FLOAT .)
    OR              reduce using rule 31 (exp -> FLOAT .)
    SUM             reduce using rule 31 (exp -> FLOAT .)
    SUB             reduce using rule 31 (exp -> FLOAT .)
    DIV             reduce using rule 31 (exp -> FLOAT .)
    MOD             reduce using rule 31 (exp -> FLOAT .)
    MUL             reduce using rule 31 (exp -> FLOAT .)
    DO              reduce using rule 31 (exp -> FLOAT .)
    END             reduce using rule 31 (exp -> FLOAT .)
    SEMICOLON       reduce using rule 31 (exp -> FLOAT .)
    ELSE            reduce using rule 31 (exp -> FLOAT .)
    RRB             reduce using rule 31 (exp -> FLOAT .)
    COMMA           reduce using rule 31 (exp -> FLOAT .)


state 37

    (32) exp -> IDENTIFIER .

    THEN            reduce using rule 32 (exp -> IDENTIFIER .)
    LT              reduce using rule 32 (exp -> IDENTIFIER .)
    LTE             reduce using rule 32 (exp -> IDENTIFIER .)
    EQUAL           reduce using rule 32 (exp -> IDENTIFIER .)
    NOTEQ           reduce using rule 32 (exp -> IDENTIFIER .)
    GT              reduce using rule 32 (exp -> IDENTIFIER .)
    GTE             reduce using rule 32 (exp -> IDENTIFIER .)
    AND             reduce using rule 32 (exp -> IDENTIFIER .)
    OR              reduce using rule 32 (exp -> IDENTIFIER .)
    SUM             reduce using rule 32 (exp -> IDENTIFIER .)
    SUB             reduce using rule 32 (exp -> IDENTIFIER .)
    DIV             reduce using rule 32 (exp -> IDENTIFIER .)
    MOD             reduce using rule 32 (exp -> IDENTIFIER .)
    MUL             reduce using rule 32 (exp -> IDENTIFIER .)
    DO              reduce using rule 32 (exp -> IDENTIFIER .)
    END             reduce using rule 32 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 32 (exp -> IDENTIFIER .)
    ELSE            reduce using rule 32 (exp -> IDENTIFIER .)
    RRB             reduce using rule 32 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 32 (exp -> IDENTIFIER .)


state 38

    (41) exp -> NOT . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 64

state 39

    (42) exp -> LRB . exp RRB
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 65

state 40

    (48) exp -> SUB . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 66

state 41

    (21) stmt -> WHILE exp . DO stmt
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    DO              shift and go to state 67
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63


state 42

    (12) proc -> PROCEDURE IDENTIFIER parameters . COLON declarations cmp_stmt

    COLON           shift and go to state 68


state 43

    (14) parameters -> LRB . declist RRB
    (4) declist -> . idlist COLON type
    (5) declist -> . declist SEMICOLON idlist COLON type
    (6) idlist -> . IDENTIFIER
    (7) idlist -> . idlist COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 9

    declist                        shift and go to state 69
    idlist                         shift and go to state 8

state 44

    (5) declist -> declist SEMICOLON idlist COLON . type
    (8) type -> . INT_KW
    (9) type -> . FLOAT_KW

    INT_KW          shift and go to state 26
    FLOAT_KW        shift and go to state 27

    type                           shift and go to state 70

state 45

    (17) stmtlist -> stmtlist SEMICOLON stmt .

    END             reduce using rule 17 (stmtlist -> stmtlist SEMICOLON stmt .)
    SEMICOLON       reduce using rule 17 (stmtlist -> stmtlist SEMICOLON stmt .)


state 46

    (18) stmt -> IDENTIFIER ASSIGN exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    END             reduce using rule 18 (stmt -> IDENTIFIER ASSIGN exp .)
    SEMICOLON       reduce using rule 18 (stmt -> IDENTIFIER ASSIGN exp .)
    ELSE            reduce using rule 18 (stmt -> IDENTIFIER ASSIGN exp .)
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63


state 47

    (26) args -> LRB act_paramlist . RRB
    (27) act_paramlist -> act_paramlist . COMMA act_param

    RRB             shift and go to state 71
    COMMA           shift and go to state 72


state 48

    (28) act_paramlist -> act_param .

    RRB             reduce using rule 28 (act_paramlist -> act_param .)
    COMMA           reduce using rule 28 (act_paramlist -> act_param .)


state 49

    (29) act_param -> exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    RRB             reduce using rule 29 (act_param -> exp .)
    COMMA           reduce using rule 29 (act_param -> exp .)
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63


state 50

    (19) stmt -> IF exp THEN . stmt ELSE stmt
    (20) stmt -> IF exp THEN . stmt
    (18) stmt -> . IDENTIFIER ASSIGN exp
    (19) stmt -> . IF exp THEN stmt ELSE stmt
    (20) stmt -> . IF exp THEN stmt
    (21) stmt -> . WHILE exp DO stmt
    (22) stmt -> . cmp_stmt
    (23) stmt -> . IDENTIFIER args
    (24) stmt -> .
    (15) cmp_stmt -> . BEGIN stmtlist END

    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    ELSE            reduce using rule 24 (stmt -> .)
    END             reduce using rule 24 (stmt -> .)
    SEMICOLON       reduce using rule 24 (stmt -> .)
    BEGIN           shift and go to state 12

    stmt                           shift and go to state 73
    cmp_stmt                       shift and go to state 22

state 51

    (33) exp -> exp LT . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 74

state 52

    (34) exp -> exp LTE . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 75

state 53

    (35) exp -> exp EQUAL . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 76

state 54

    (36) exp -> exp NOTEQ . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 77

state 55

    (37) exp -> exp GT . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 78

state 56

    (38) exp -> exp GTE . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 79

state 57

    (39) exp -> exp AND . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 80

state 58

    (40) exp -> exp OR . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 81

state 59

    (43) exp -> exp SUM . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 82

state 60

    (44) exp -> exp SUB . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 83

state 61

    (45) exp -> exp DIV . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 84

state 62

    (46) exp -> exp MOD . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 85

state 63

    (47) exp -> exp MUL . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    exp                            shift and go to state 86

state 64

    (41) exp -> NOT exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 41 (exp -> NOT exp .)
    AND             reduce using rule 41 (exp -> NOT exp .)
    OR              reduce using rule 41 (exp -> NOT exp .)
    DO              reduce using rule 41 (exp -> NOT exp .)
    END             reduce using rule 41 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 41 (exp -> NOT exp .)
    ELSE            reduce using rule 41 (exp -> NOT exp .)
    RRB             reduce using rule 41 (exp -> NOT exp .)
    COMMA           reduce using rule 41 (exp -> NOT exp .)
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! LT              [ reduce using rule 41 (exp -> NOT exp .) ]
  ! LTE             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! EQUAL           [ reduce using rule 41 (exp -> NOT exp .) ]
  ! NOTEQ           [ reduce using rule 41 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 41 (exp -> NOT exp .) ]
  ! GTE             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! SUM             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 41 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 65

    (42) exp -> LRB exp . RRB
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    RRB             shift and go to state 87
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    AND             shift and go to state 57
    OR              shift and go to state 58
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63


state 66

    (48) exp -> SUB exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 48 (exp -> SUB exp .)
    LT              reduce using rule 48 (exp -> SUB exp .)
    LTE             reduce using rule 48 (exp -> SUB exp .)
    EQUAL           reduce using rule 48 (exp -> SUB exp .)
    NOTEQ           reduce using rule 48 (exp -> SUB exp .)
    GT              reduce using rule 48 (exp -> SUB exp .)
    GTE             reduce using rule 48 (exp -> SUB exp .)
    AND             reduce using rule 48 (exp -> SUB exp .)
    OR              reduce using rule 48 (exp -> SUB exp .)
    SUM             reduce using rule 48 (exp -> SUB exp .)
    SUB             reduce using rule 48 (exp -> SUB exp .)
    MOD             reduce using rule 48 (exp -> SUB exp .)
    DO              reduce using rule 48 (exp -> SUB exp .)
    END             reduce using rule 48 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 48 (exp -> SUB exp .)
    ELSE            reduce using rule 48 (exp -> SUB exp .)
    RRB             reduce using rule 48 (exp -> SUB exp .)
    COMMA           reduce using rule 48 (exp -> SUB exp .)
    DIV             shift and go to state 61
    MUL             shift and go to state 63

  ! DIV             [ reduce using rule 48 (exp -> SUB exp .) ]
  ! MUL             [ reduce using rule 48 (exp -> SUB exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 62 ]


state 67

    (21) stmt -> WHILE exp DO . stmt
    (18) stmt -> . IDENTIFIER ASSIGN exp
    (19) stmt -> . IF exp THEN stmt ELSE stmt
    (20) stmt -> . IF exp THEN stmt
    (21) stmt -> . WHILE exp DO stmt
    (22) stmt -> . cmp_stmt
    (23) stmt -> . IDENTIFIER args
    (24) stmt -> .
    (15) cmp_stmt -> . BEGIN stmtlist END

    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    ELSE            reduce using rule 24 (stmt -> .)
    END             reduce using rule 24 (stmt -> .)
    SEMICOLON       reduce using rule 24 (stmt -> .)
    BEGIN           shift and go to state 12

    stmt                           shift and go to state 88
    cmp_stmt                       shift and go to state 22

state 68

    (12) proc -> PROCEDURE IDENTIFIER parameters COLON . declarations cmp_stmt
    (2) declarations -> .
    (3) declarations -> . VAR declist

    BEGIN           reduce using rule 2 (declarations -> .)
    VAR             shift and go to state 5

    declarations                   shift and go to state 89

state 69

    (14) parameters -> LRB declist . RRB
    (5) declist -> declist . SEMICOLON idlist COLON type

    RRB             shift and go to state 90
    SEMICOLON       shift and go to state 14


state 70

    (5) declist -> declist SEMICOLON idlist COLON type .

    SEMICOLON       reduce using rule 5 (declist -> declist SEMICOLON idlist COLON type .)
    BEGIN           reduce using rule 5 (declist -> declist SEMICOLON idlist COLON type .)
    PROCEDURE       reduce using rule 5 (declist -> declist SEMICOLON idlist COLON type .)
    RRB             reduce using rule 5 (declist -> declist SEMICOLON idlist COLON type .)


state 71

    (26) args -> LRB act_paramlist RRB .

    END             reduce using rule 26 (args -> LRB act_paramlist RRB .)
    SEMICOLON       reduce using rule 26 (args -> LRB act_paramlist RRB .)
    ELSE            reduce using rule 26 (args -> LRB act_paramlist RRB .)


state 72

    (27) act_paramlist -> act_paramlist COMMA . act_param
    (29) act_param -> . exp
    (30) exp -> . INTEGER
    (31) exp -> . FLOAT
    (32) exp -> . IDENTIFIER
    (33) exp -> . exp LT exp
    (34) exp -> . exp LTE exp
    (35) exp -> . exp EQUAL exp
    (36) exp -> . exp NOTEQ exp
    (37) exp -> . exp GT exp
    (38) exp -> . exp GTE exp
    (39) exp -> . exp AND exp
    (40) exp -> . exp OR exp
    (41) exp -> . NOT exp
    (42) exp -> . LRB exp RRB
    (43) exp -> . exp SUM exp
    (44) exp -> . exp SUB exp
    (45) exp -> . exp DIV exp
    (46) exp -> . exp MOD exp
    (47) exp -> . exp MUL exp
    (48) exp -> . SUB exp

    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    IDENTIFIER      shift and go to state 37
    NOT             shift and go to state 38
    LRB             shift and go to state 39
    SUB             shift and go to state 40

    act_param                      shift and go to state 91
    exp                            shift and go to state 49

state 73

    (19) stmt -> IF exp THEN stmt . ELSE stmt
    (20) stmt -> IF exp THEN stmt .

    ELSE            shift and go to state 92
    END             reduce using rule 20 (stmt -> IF exp THEN stmt .)
    SEMICOLON       reduce using rule 20 (stmt -> IF exp THEN stmt .)

  ! ELSE            [ reduce using rule 20 (stmt -> IF exp THEN stmt .) ]


state 74

    (33) exp -> exp LT exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 33 (exp -> exp LT exp .)
    LT              reduce using rule 33 (exp -> exp LT exp .)
    LTE             reduce using rule 33 (exp -> exp LT exp .)
    EQUAL           reduce using rule 33 (exp -> exp LT exp .)
    NOTEQ           reduce using rule 33 (exp -> exp LT exp .)
    GT              reduce using rule 33 (exp -> exp LT exp .)
    GTE             reduce using rule 33 (exp -> exp LT exp .)
    AND             reduce using rule 33 (exp -> exp LT exp .)
    OR              reduce using rule 33 (exp -> exp LT exp .)
    DO              reduce using rule 33 (exp -> exp LT exp .)
    END             reduce using rule 33 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 33 (exp -> exp LT exp .)
    ELSE            reduce using rule 33 (exp -> exp LT exp .)
    RRB             reduce using rule 33 (exp -> exp LT exp .)
    COMMA           reduce using rule 33 (exp -> exp LT exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 33 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 33 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 33 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 33 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 33 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 75

    (34) exp -> exp LTE exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 34 (exp -> exp LTE exp .)
    LT              reduce using rule 34 (exp -> exp LTE exp .)
    LTE             reduce using rule 34 (exp -> exp LTE exp .)
    EQUAL           reduce using rule 34 (exp -> exp LTE exp .)
    NOTEQ           reduce using rule 34 (exp -> exp LTE exp .)
    GT              reduce using rule 34 (exp -> exp LTE exp .)
    GTE             reduce using rule 34 (exp -> exp LTE exp .)
    AND             reduce using rule 34 (exp -> exp LTE exp .)
    OR              reduce using rule 34 (exp -> exp LTE exp .)
    DO              reduce using rule 34 (exp -> exp LTE exp .)
    END             reduce using rule 34 (exp -> exp LTE exp .)
    SEMICOLON       reduce using rule 34 (exp -> exp LTE exp .)
    ELSE            reduce using rule 34 (exp -> exp LTE exp .)
    RRB             reduce using rule 34 (exp -> exp LTE exp .)
    COMMA           reduce using rule 34 (exp -> exp LTE exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 34 (exp -> exp LTE exp .) ]
  ! SUB             [ reduce using rule 34 (exp -> exp LTE exp .) ]
  ! DIV             [ reduce using rule 34 (exp -> exp LTE exp .) ]
  ! MOD             [ reduce using rule 34 (exp -> exp LTE exp .) ]
  ! MUL             [ reduce using rule 34 (exp -> exp LTE exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 76

    (35) exp -> exp EQUAL exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 35 (exp -> exp EQUAL exp .)
    LT              reduce using rule 35 (exp -> exp EQUAL exp .)
    LTE             reduce using rule 35 (exp -> exp EQUAL exp .)
    EQUAL           reduce using rule 35 (exp -> exp EQUAL exp .)
    NOTEQ           reduce using rule 35 (exp -> exp EQUAL exp .)
    GT              reduce using rule 35 (exp -> exp EQUAL exp .)
    GTE             reduce using rule 35 (exp -> exp EQUAL exp .)
    AND             reduce using rule 35 (exp -> exp EQUAL exp .)
    OR              reduce using rule 35 (exp -> exp EQUAL exp .)
    DO              reduce using rule 35 (exp -> exp EQUAL exp .)
    END             reduce using rule 35 (exp -> exp EQUAL exp .)
    SEMICOLON       reduce using rule 35 (exp -> exp EQUAL exp .)
    ELSE            reduce using rule 35 (exp -> exp EQUAL exp .)
    RRB             reduce using rule 35 (exp -> exp EQUAL exp .)
    COMMA           reduce using rule 35 (exp -> exp EQUAL exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 35 (exp -> exp EQUAL exp .) ]
  ! SUB             [ reduce using rule 35 (exp -> exp EQUAL exp .) ]
  ! DIV             [ reduce using rule 35 (exp -> exp EQUAL exp .) ]
  ! MOD             [ reduce using rule 35 (exp -> exp EQUAL exp .) ]
  ! MUL             [ reduce using rule 35 (exp -> exp EQUAL exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 77

    (36) exp -> exp NOTEQ exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 36 (exp -> exp NOTEQ exp .)
    LT              reduce using rule 36 (exp -> exp NOTEQ exp .)
    LTE             reduce using rule 36 (exp -> exp NOTEQ exp .)
    EQUAL           reduce using rule 36 (exp -> exp NOTEQ exp .)
    NOTEQ           reduce using rule 36 (exp -> exp NOTEQ exp .)
    GT              reduce using rule 36 (exp -> exp NOTEQ exp .)
    GTE             reduce using rule 36 (exp -> exp NOTEQ exp .)
    AND             reduce using rule 36 (exp -> exp NOTEQ exp .)
    OR              reduce using rule 36 (exp -> exp NOTEQ exp .)
    DO              reduce using rule 36 (exp -> exp NOTEQ exp .)
    END             reduce using rule 36 (exp -> exp NOTEQ exp .)
    SEMICOLON       reduce using rule 36 (exp -> exp NOTEQ exp .)
    ELSE            reduce using rule 36 (exp -> exp NOTEQ exp .)
    RRB             reduce using rule 36 (exp -> exp NOTEQ exp .)
    COMMA           reduce using rule 36 (exp -> exp NOTEQ exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 36 (exp -> exp NOTEQ exp .) ]
  ! SUB             [ reduce using rule 36 (exp -> exp NOTEQ exp .) ]
  ! DIV             [ reduce using rule 36 (exp -> exp NOTEQ exp .) ]
  ! MOD             [ reduce using rule 36 (exp -> exp NOTEQ exp .) ]
  ! MUL             [ reduce using rule 36 (exp -> exp NOTEQ exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 78

    (37) exp -> exp GT exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 37 (exp -> exp GT exp .)
    LT              reduce using rule 37 (exp -> exp GT exp .)
    LTE             reduce using rule 37 (exp -> exp GT exp .)
    EQUAL           reduce using rule 37 (exp -> exp GT exp .)
    NOTEQ           reduce using rule 37 (exp -> exp GT exp .)
    GT              reduce using rule 37 (exp -> exp GT exp .)
    GTE             reduce using rule 37 (exp -> exp GT exp .)
    AND             reduce using rule 37 (exp -> exp GT exp .)
    OR              reduce using rule 37 (exp -> exp GT exp .)
    DO              reduce using rule 37 (exp -> exp GT exp .)
    END             reduce using rule 37 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 37 (exp -> exp GT exp .)
    ELSE            reduce using rule 37 (exp -> exp GT exp .)
    RRB             reduce using rule 37 (exp -> exp GT exp .)
    COMMA           reduce using rule 37 (exp -> exp GT exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 37 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 37 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 37 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 37 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 37 (exp -> exp GT exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 79

    (38) exp -> exp GTE exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 38 (exp -> exp GTE exp .)
    LT              reduce using rule 38 (exp -> exp GTE exp .)
    LTE             reduce using rule 38 (exp -> exp GTE exp .)
    EQUAL           reduce using rule 38 (exp -> exp GTE exp .)
    NOTEQ           reduce using rule 38 (exp -> exp GTE exp .)
    GT              reduce using rule 38 (exp -> exp GTE exp .)
    GTE             reduce using rule 38 (exp -> exp GTE exp .)
    AND             reduce using rule 38 (exp -> exp GTE exp .)
    OR              reduce using rule 38 (exp -> exp GTE exp .)
    DO              reduce using rule 38 (exp -> exp GTE exp .)
    END             reduce using rule 38 (exp -> exp GTE exp .)
    SEMICOLON       reduce using rule 38 (exp -> exp GTE exp .)
    ELSE            reduce using rule 38 (exp -> exp GTE exp .)
    RRB             reduce using rule 38 (exp -> exp GTE exp .)
    COMMA           reduce using rule 38 (exp -> exp GTE exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 38 (exp -> exp GTE exp .) ]
  ! SUB             [ reduce using rule 38 (exp -> exp GTE exp .) ]
  ! DIV             [ reduce using rule 38 (exp -> exp GTE exp .) ]
  ! MOD             [ reduce using rule 38 (exp -> exp GTE exp .) ]
  ! MUL             [ reduce using rule 38 (exp -> exp GTE exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 80

    (39) exp -> exp AND exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 39 (exp -> exp AND exp .)
    AND             reduce using rule 39 (exp -> exp AND exp .)
    OR              reduce using rule 39 (exp -> exp AND exp .)
    DO              reduce using rule 39 (exp -> exp AND exp .)
    END             reduce using rule 39 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 39 (exp -> exp AND exp .)
    ELSE            reduce using rule 39 (exp -> exp AND exp .)
    RRB             reduce using rule 39 (exp -> exp AND exp .)
    COMMA           reduce using rule 39 (exp -> exp AND exp .)
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! LT              [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! LTE             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! EQUAL           [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! NOTEQ           [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! GTE             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! SUM             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 39 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]


state 81

    (40) exp -> exp OR exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 40 (exp -> exp OR exp .)
    OR              reduce using rule 40 (exp -> exp OR exp .)
    DO              reduce using rule 40 (exp -> exp OR exp .)
    END             reduce using rule 40 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 40 (exp -> exp OR exp .)
    ELSE            reduce using rule 40 (exp -> exp OR exp .)
    RRB             reduce using rule 40 (exp -> exp OR exp .)
    COMMA           reduce using rule 40 (exp -> exp OR exp .)
    LT              shift and go to state 51
    LTE             shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQ           shift and go to state 54
    GT              shift and go to state 55
    GTE             shift and go to state 56
    AND             shift and go to state 57
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    MUL             shift and go to state 63

  ! LT              [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! LTE             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! EQUAL           [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! NOTEQ           [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! GTE             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! SUM             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 40 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 58 ]


state 82

    (43) exp -> exp SUM exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 43 (exp -> exp SUM exp .)
    LT              reduce using rule 43 (exp -> exp SUM exp .)
    LTE             reduce using rule 43 (exp -> exp SUM exp .)
    EQUAL           reduce using rule 43 (exp -> exp SUM exp .)
    NOTEQ           reduce using rule 43 (exp -> exp SUM exp .)
    GT              reduce using rule 43 (exp -> exp SUM exp .)
    GTE             reduce using rule 43 (exp -> exp SUM exp .)
    AND             reduce using rule 43 (exp -> exp SUM exp .)
    OR              reduce using rule 43 (exp -> exp SUM exp .)
    SUM             reduce using rule 43 (exp -> exp SUM exp .)
    SUB             reduce using rule 43 (exp -> exp SUM exp .)
    MOD             reduce using rule 43 (exp -> exp SUM exp .)
    DO              reduce using rule 43 (exp -> exp SUM exp .)
    END             reduce using rule 43 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 43 (exp -> exp SUM exp .)
    ELSE            reduce using rule 43 (exp -> exp SUM exp .)
    RRB             reduce using rule 43 (exp -> exp SUM exp .)
    COMMA           reduce using rule 43 (exp -> exp SUM exp .)
    DIV             shift and go to state 61
    MUL             shift and go to state 63

  ! DIV             [ reduce using rule 43 (exp -> exp SUM exp .) ]
  ! MUL             [ reduce using rule 43 (exp -> exp SUM exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 62 ]


state 83

    (44) exp -> exp SUB exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 44 (exp -> exp SUB exp .)
    LT              reduce using rule 44 (exp -> exp SUB exp .)
    LTE             reduce using rule 44 (exp -> exp SUB exp .)
    EQUAL           reduce using rule 44 (exp -> exp SUB exp .)
    NOTEQ           reduce using rule 44 (exp -> exp SUB exp .)
    GT              reduce using rule 44 (exp -> exp SUB exp .)
    GTE             reduce using rule 44 (exp -> exp SUB exp .)
    AND             reduce using rule 44 (exp -> exp SUB exp .)
    OR              reduce using rule 44 (exp -> exp SUB exp .)
    SUM             reduce using rule 44 (exp -> exp SUB exp .)
    SUB             reduce using rule 44 (exp -> exp SUB exp .)
    MOD             reduce using rule 44 (exp -> exp SUB exp .)
    DO              reduce using rule 44 (exp -> exp SUB exp .)
    END             reduce using rule 44 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 44 (exp -> exp SUB exp .)
    ELSE            reduce using rule 44 (exp -> exp SUB exp .)
    RRB             reduce using rule 44 (exp -> exp SUB exp .)
    COMMA           reduce using rule 44 (exp -> exp SUB exp .)
    DIV             shift and go to state 61
    MUL             shift and go to state 63

  ! DIV             [ reduce using rule 44 (exp -> exp SUB exp .) ]
  ! MUL             [ reduce using rule 44 (exp -> exp SUB exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MOD             [ shift and go to state 62 ]


state 84

    (45) exp -> exp DIV exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 45 (exp -> exp DIV exp .)
    LT              reduce using rule 45 (exp -> exp DIV exp .)
    LTE             reduce using rule 45 (exp -> exp DIV exp .)
    EQUAL           reduce using rule 45 (exp -> exp DIV exp .)
    NOTEQ           reduce using rule 45 (exp -> exp DIV exp .)
    GT              reduce using rule 45 (exp -> exp DIV exp .)
    GTE             reduce using rule 45 (exp -> exp DIV exp .)
    AND             reduce using rule 45 (exp -> exp DIV exp .)
    OR              reduce using rule 45 (exp -> exp DIV exp .)
    SUM             reduce using rule 45 (exp -> exp DIV exp .)
    SUB             reduce using rule 45 (exp -> exp DIV exp .)
    DIV             reduce using rule 45 (exp -> exp DIV exp .)
    MOD             reduce using rule 45 (exp -> exp DIV exp .)
    MUL             reduce using rule 45 (exp -> exp DIV exp .)
    DO              reduce using rule 45 (exp -> exp DIV exp .)
    END             reduce using rule 45 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 45 (exp -> exp DIV exp .)
    ELSE            reduce using rule 45 (exp -> exp DIV exp .)
    RRB             reduce using rule 45 (exp -> exp DIV exp .)
    COMMA           reduce using rule 45 (exp -> exp DIV exp .)

  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]


state 85

    (46) exp -> exp MOD exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 46 (exp -> exp MOD exp .)
    LT              reduce using rule 46 (exp -> exp MOD exp .)
    LTE             reduce using rule 46 (exp -> exp MOD exp .)
    EQUAL           reduce using rule 46 (exp -> exp MOD exp .)
    NOTEQ           reduce using rule 46 (exp -> exp MOD exp .)
    GT              reduce using rule 46 (exp -> exp MOD exp .)
    GTE             reduce using rule 46 (exp -> exp MOD exp .)
    AND             reduce using rule 46 (exp -> exp MOD exp .)
    OR              reduce using rule 46 (exp -> exp MOD exp .)
    MOD             reduce using rule 46 (exp -> exp MOD exp .)
    DO              reduce using rule 46 (exp -> exp MOD exp .)
    END             reduce using rule 46 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 46 (exp -> exp MOD exp .)
    ELSE            reduce using rule 46 (exp -> exp MOD exp .)
    RRB             reduce using rule 46 (exp -> exp MOD exp .)
    COMMA           reduce using rule 46 (exp -> exp MOD exp .)
    SUM             shift and go to state 59
    SUB             shift and go to state 60
    DIV             shift and go to state 61
    MUL             shift and go to state 63

  ! SUM             [ reduce using rule 46 (exp -> exp MOD exp .) ]
  ! SUB             [ reduce using rule 46 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 46 (exp -> exp MOD exp .) ]
  ! MUL             [ reduce using rule 46 (exp -> exp MOD exp .) ]
  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! MOD             [ shift and go to state 62 ]


state 86

    (47) exp -> exp MUL exp .
    (33) exp -> exp . LT exp
    (34) exp -> exp . LTE exp
    (35) exp -> exp . EQUAL exp
    (36) exp -> exp . NOTEQ exp
    (37) exp -> exp . GT exp
    (38) exp -> exp . GTE exp
    (39) exp -> exp . AND exp
    (40) exp -> exp . OR exp
    (43) exp -> exp . SUM exp
    (44) exp -> exp . SUB exp
    (45) exp -> exp . DIV exp
    (46) exp -> exp . MOD exp
    (47) exp -> exp . MUL exp

    THEN            reduce using rule 47 (exp -> exp MUL exp .)
    LT              reduce using rule 47 (exp -> exp MUL exp .)
    LTE             reduce using rule 47 (exp -> exp MUL exp .)
    EQUAL           reduce using rule 47 (exp -> exp MUL exp .)
    NOTEQ           reduce using rule 47 (exp -> exp MUL exp .)
    GT              reduce using rule 47 (exp -> exp MUL exp .)
    GTE             reduce using rule 47 (exp -> exp MUL exp .)
    AND             reduce using rule 47 (exp -> exp MUL exp .)
    OR              reduce using rule 47 (exp -> exp MUL exp .)
    SUM             reduce using rule 47 (exp -> exp MUL exp .)
    SUB             reduce using rule 47 (exp -> exp MUL exp .)
    DIV             reduce using rule 47 (exp -> exp MUL exp .)
    MOD             reduce using rule 47 (exp -> exp MUL exp .)
    MUL             reduce using rule 47 (exp -> exp MUL exp .)
    DO              reduce using rule 47 (exp -> exp MUL exp .)
    END             reduce using rule 47 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp MUL exp .)
    ELSE            reduce using rule 47 (exp -> exp MUL exp .)
    RRB             reduce using rule 47 (exp -> exp MUL exp .)
    COMMA           reduce using rule 47 (exp -> exp MUL exp .)

  ! LT              [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EQUAL           [ shift and go to state 53 ]
  ! NOTEQ           [ shift and go to state 54 ]
  ! GT              [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! AND             [ shift and go to state 57 ]
  ! OR              [ shift and go to state 58 ]
  ! SUM             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]


state 87

    (42) exp -> LRB exp RRB .

    THEN            reduce using rule 42 (exp -> LRB exp RRB .)
    LT              reduce using rule 42 (exp -> LRB exp RRB .)
    LTE             reduce using rule 42 (exp -> LRB exp RRB .)
    EQUAL           reduce using rule 42 (exp -> LRB exp RRB .)
    NOTEQ           reduce using rule 42 (exp -> LRB exp RRB .)
    GT              reduce using rule 42 (exp -> LRB exp RRB .)
    GTE             reduce using rule 42 (exp -> LRB exp RRB .)
    AND             reduce using rule 42 (exp -> LRB exp RRB .)
    OR              reduce using rule 42 (exp -> LRB exp RRB .)
    SUM             reduce using rule 42 (exp -> LRB exp RRB .)
    SUB             reduce using rule 42 (exp -> LRB exp RRB .)
    DIV             reduce using rule 42 (exp -> LRB exp RRB .)
    MOD             reduce using rule 42 (exp -> LRB exp RRB .)
    MUL             reduce using rule 42 (exp -> LRB exp RRB .)
    DO              reduce using rule 42 (exp -> LRB exp RRB .)
    END             reduce using rule 42 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 42 (exp -> LRB exp RRB .)
    ELSE            reduce using rule 42 (exp -> LRB exp RRB .)
    RRB             reduce using rule 42 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 42 (exp -> LRB exp RRB .)


state 88

    (21) stmt -> WHILE exp DO stmt .

    END             reduce using rule 21 (stmt -> WHILE exp DO stmt .)
    SEMICOLON       reduce using rule 21 (stmt -> WHILE exp DO stmt .)
    ELSE            reduce using rule 21 (stmt -> WHILE exp DO stmt .)


state 89

    (12) proc -> PROCEDURE IDENTIFIER parameters COLON declarations . cmp_stmt
    (15) cmp_stmt -> . BEGIN stmtlist END

    BEGIN           shift and go to state 12

    cmp_stmt                       shift and go to state 93

state 90

    (14) parameters -> LRB declist RRB .

    COLON           reduce using rule 14 (parameters -> LRB declist RRB .)


state 91

    (27) act_paramlist -> act_paramlist COMMA act_param .

    RRB             reduce using rule 27 (act_paramlist -> act_paramlist COMMA act_param .)
    COMMA           reduce using rule 27 (act_paramlist -> act_paramlist COMMA act_param .)


state 92

    (19) stmt -> IF exp THEN stmt ELSE . stmt
    (18) stmt -> . IDENTIFIER ASSIGN exp
    (19) stmt -> . IF exp THEN stmt ELSE stmt
    (20) stmt -> . IF exp THEN stmt
    (21) stmt -> . WHILE exp DO stmt
    (22) stmt -> . cmp_stmt
    (23) stmt -> . IDENTIFIER args
    (24) stmt -> .
    (15) cmp_stmt -> . BEGIN stmtlist END

    IDENTIFIER      shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    ELSE            reduce using rule 24 (stmt -> .)
    END             reduce using rule 24 (stmt -> .)
    SEMICOLON       reduce using rule 24 (stmt -> .)
    BEGIN           shift and go to state 12

    stmt                           shift and go to state 94
    cmp_stmt                       shift and go to state 22

state 93

    (12) proc -> PROCEDURE IDENTIFIER parameters COLON declarations cmp_stmt .

    BEGIN           reduce using rule 12 (proc -> PROCEDURE IDENTIFIER parameters COLON declarations cmp_stmt .)
    PROCEDURE       reduce using rule 12 (proc -> PROCEDURE IDENTIFIER parameters COLON declarations cmp_stmt .)


state 94

    (19) stmt -> IF exp THEN stmt ELSE stmt .

    END             reduce using rule 19 (stmt -> IF exp THEN stmt ELSE stmt .)
    SEMICOLON       reduce using rule 19 (stmt -> IF exp THEN stmt ELSE stmt .)
    ELSE            reduce using rule 19 (stmt -> IF exp THEN stmt ELSE stmt .)

